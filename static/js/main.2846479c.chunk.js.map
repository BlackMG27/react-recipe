{"version":3,"sources":["components/Recipe.js","utils/API.js","components/RecipeSearch.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","console","log","data","react_default","a","createElement","className","src","recipe","image","alt","label","href","url","target","rel","source","ingredientLines","map","e","API","search","query","axios","get","concat","RecipeSearch","state","recipes","input","searchRecipes","then","res","_this","setState","hits","catch","err","handleInputChange","event","_event$target","value","name","Object","defineProperty","handleFormSubmit","preventDefault","react","this","onChange","onClick","components_Recipe","Component","App","components_RecipeSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAwCeA,MAtCf,SAAgBC,GAGZ,OAFAC,QAAQC,IAAIF,EAAMG,MAGdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACXH,EAAAC,EAAAC,cAAA,OACIC,UAAU,YACVC,IAAKR,EAAMG,KAAKM,OAAOC,MACvBC,IAAKX,EAAMG,KAAKM,OAAOG,SAC/BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gDAAgDP,EAAMG,KAAKM,OAAOG,MAC9ER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,cAEJH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,KAAGO,KAAMb,EAAMG,KAAKM,OAAOK,IAAKC,OAAO,SAASC,IAAI,uBAAuBhB,EAAMG,KAAKM,OAAOQ,UAGrGb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sCAAhB,cAAgEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,UAEhEH,EAAAC,EAAAC,cAAA,UACKN,EACIG,KACAM,OACAS,gBACAC,IAAI,SAAAC,GAAC,OACFhB,EAAAC,EAAAC,cAAA,UAAKc,2BC5BtBC,EAAA,CACXC,OAAS,SAAUC,GACf,OAAOC,IAAMC,IAAN,mCAAAC,OAA6CH,EAA7C,6ECqDAI,6MApDXC,MAAQ,CACJC,QAAS,GACTC,MAAO,MAGXC,cAAgB,SAAAR,GACZtB,QAAQC,IAAIqB,GACZF,EACKC,OAAOC,GACPS,KAAK,SAAAC,GAAG,OAAIC,EAAKC,SAAS,CAACN,QAASI,EAAI9B,KAAKiC,SAC7CC,MAAM,SAAAC,GAAG,OAAIrC,QAAQC,IAAIoC,QAGlCC,kBAAoB,SAAAC,GAAS,IAAAC,EACHD,EAAMzB,OAArB2B,EADkBD,EAClBC,MAAOC,EADWF,EACXE,KACd1C,QAAQC,IAAIwC,EAAQC,GACpBT,EAAKC,SAALS,OAAAC,EAAA,EAAAD,CAAA,GAAgBD,EAAOD,OAG3BI,iBAAmB,SAAAN,GACfA,EAAMO,iBAENb,EAAKH,cAAcG,EAAKN,MAAME,gFAI9B,OACI1B,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,KACI5C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aACdH,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOoC,MAAOO,KAAKrB,MAAME,MAAOoB,SAAUD,KAAKV,kBAAmBI,KAAK,UACvEvC,EAAAC,EAAAC,cAAA,UAAQ6C,QAASF,KAAKH,iBAAkBvC,UAAU,OAAlD,YAGRH,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACV0C,KACIrB,MACAC,QACAV,IAAI,SAAAV,GAAM,OAAKL,EAAAC,EAAAC,cAAC8C,EAAD,CAAQjD,KAAMM,gBA3C/B4C,aCGZC,MAJf,WACE,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.2846479c.chunk.js","sourcesContent":["import React from 'react';\n//create the component\nfunction Recipe(props) {\n    console.log(props.data);\n    //render the results create the parts\n    return (\n        <div className=\"col s12 l4\">\n            <div className=\"card\">\n                <div className=\"card-image waves-effect waves-block waves-light\">\n                    <img\n                        className=\"activator\"\n                        src={props.data.recipe.image}\n                        alt={props.data.recipe.label}/></div>\n                <div className=\"card-content\">\n                    <span className=\"card-title activator grey-text text-darken-4\">{props.data.recipe.label}\n                        <i className=\"material-icons right\">more_vert</i>\n                    </span>\n                    <p>\n                        <a href={props.data.recipe.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.data.recipe.source}</a>\n                    </p>\n                </div>\n                <div className=\"card-reveal\">\n                    <span className=\"card-title grey-text text-darken-4\">Ingredients<i className=\"material-icons right\">close</i>\n                    </span>\n                    <ul>\n                        {props\n                            .data\n                            .recipe\n                            .ingredientLines\n                            .map(e => (\n                                <li>{e}</li>\n                            ))}\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n    )\n\n}\nexport default Recipe;","import axios from 'axios';\n\nexport default {\n    search : function (query) {\n        return axios.get(`https://api.edamam.com/search?q=${query}&app_id=53c99899&app_key=5bcac43624cd4fde163db0d5b37859e3&from=0&to=48`)\n    }\n}","import React, {Component, Fragment} from 'react';\nimport Recipe from './Recipe';\nimport API from './../utils/API';\n\nclass RecipeSearch extends Component {\n    state = {\n        recipes: [],\n        input: ''\n    }\n\n    searchRecipes = query => {\n        console.log(query);\n        API\n            .search(query)\n            .then(res => this.setState({recipes: res.data.hits}))\n            .catch(err => console.log(err));\n    }\n\n    handleInputChange = event => {\n        const {value, name} = event.target;\n        console.log(value + name);\n        this.setState({[name]: value});\n    }\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        //console.log(this.state.input);\n        this.searchRecipes(this.state.input);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <header className=\"container\">\n                    <h1>Hello</h1>\n                </header>\n                <section className=\"container\">\n                    <form>\n                        <input value={this.state.input} onChange={this.handleInputChange} name='input'/>\n                        <button onClick={this.handleFormSubmit} className=\"btn\">Search</button>\n                    </form>\n                </section>\n                <section className=\"container\">\n                    <div className=\"row\">\n                        {this\n                            .state\n                            .recipes\n                            .map(recipe => (<Recipe data={recipe}/>))}\n\n                    </div>\n                </section>\n            </Fragment>\n\n        );\n    }\n}\n\nexport default RecipeSearch;","import React from 'react';\nimport RecipeSearch from './components/RecipeSearch';\n\nfunction App() {\n  return <RecipeSearch/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}